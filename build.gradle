plugins {
    id 'java'
    id 'maven-publish'    
    id 'java-gradle-plugin'
}

apply from: 'dependencies.gradle'
apply from: 'gradle/functional-test.gradle'

sourceCompatibility = 1.8
targetCompatibility = 1.8

jar.baseName = 'gretl'
description = 'gretl gradle plugin'

group 'ch.so.agi'
version '1.0.5'+System.getProperty('release', "-SNAPSHOT") // -Drelease


/*
publishing {
    repositories {
        mavenLocal()
    }
}
*/
allprojects {
    repositories {
        mavenLocal()
        maven {
            url "http://jars.interlis.ch"
        }
        maven {
            url "http://download.osgeo.org/webdav/geotools/"
        }
        mavenCentral()
        jcenter()
    }
}

dependencies {
    implementation postgresqlDependency
    implementation sqliteJdbcDependency
    implementation derbyDependency
    //implementation oracleDependency

    implementation ilivalidatorDependency
    implementation(ili2pgDependency) {
        exclude group: 'ch.ehi', module: 'ehisqlgen'
    }
    implementation ioxWkfDependency
    implementation ioxIliDependency
    implementation ehiSqlgenDependency

    implementation apacheCommonsIoDependency

    testImplementation junitDependency

    functionalTestImplementation junitDependency
    functionalTestImplementation ioxWkfDependency
    functionalTestRuntime postgresqlDependency
}

gradlePlugin {
    testSourceSets sourceSets.functionalTest

    plugins {
        gretlPlugin {
            id = 'ch.so.agi.gretl'
            implementationClass = 'ch.so.agi.gretl.gradle.GretlPlugin'
        }
    }
}

// Transfer the required configuration variables to all test code.
// (The test code has no access to the -D or -P variables as it is executed in a separate jvm-process)
tasks.withType(Test) {
    def GRETLTEST_DBURI_PG = 'gretltest_dburi_pg'
    systemProperty(GRETLTEST_DBURI_PG, findProperty(GRETLTEST_DBURI_PG))

    def GRETLTEST_DBURI_ORA = 'gretltest_dburi_ora'
    systemProperty(GRETLTEST_DBURI_ORA, findProperty(GRETLTEST_DBURI_ORA))

    println 'dburi_pg: ' + getSystemProperties().getAt(GRETLTEST_DBURI_PG)
    println 'dburi_ora: ' + getSystemProperties().getAt(GRETLTEST_DBURI_ORA)
}

task fubar() {
    doLast {
        println version
        println findProperty('release')
    }
}