plugins {
    id 'java'
    id 'maven-publish'    
    id 'java-gradle-plugin'
    id 'eclipse'
}

apply from: 'dependencies.gradle'

sourceCompatibility = 1.8
targetCompatibility = 1.8

jar.baseName = 'gretl'
description = 'gretl gradle plugin'

group 'ch.so.agi'
version '1.0.5'+System.getProperty('release', "-SNAPSHOT") // -Drelease

sourceSets {
    functionalTest {
        java.srcDir file('src/functionalTest/java')
    }
}

publishing {
    repositories {
        mavenLocal()
    }
}

repositories {
    mavenLocal()
    maven {
        url "http://jars.interlis.ch"
    }
    maven {
        url "http://download.osgeo.org/webdav/geotools/"
    }
    mavenCentral()
}

dependencies {
    testCompile junitDependency

    compile postgresqlDependency
    compile sqliteJdbcDependency
    compile derbyDependency
    //compile oracleDependency

    compile ilivalidatorDependency
    compile(ili2pgDependency) {
        exclude group: 'ch.ehi', module: 'ehisqlgen'
    }
    compile ioxWkfDependency
    compile ioxIliDependency

    compile ehiSqlgenDependency
    
    //testCompile gradleTestKit()
    //functTestCompile gradleTestKit()
    functionalTestCompile junitDependency
    
}

gradlePlugin {
    testSourceSets sourceSets.functionalTest

    plugins {
        gretlPlugin {
            id = 'ch.so.agi.gretl'
            implementationClass = 'ch.so.agi.gretl.gradle.GretlPlugin'
        }
    }
}

test {
    useJUnit {
        // Exclude all Tests with dependency to a db server (pg, oracle, ..)
        excludeCategories 'ch.so.agi.gretl.testutil.DbTest'
    }
}

task dbTest(type: Test, dependsOn: [compileJava, compileTestJava]) {
    useJUnit {
        // Runs all tests with dependency to a db server
        includeCategories 'ch.so.agi.gretl.testutil.DbTest'
    }
}

task fubar() {
    doLast {
        println version
        println findProperty('release')
    }
}


task functionalTest(type: Test) {
    description = 'Run the functional tests.'
    group = 'Verification'

    // show standard out and standard error of the test JVM(s) on the console
    testLogging.showStandardStreams = System.getenv('TRAVIS')=='true'

    testClassesDirs = sourceSets.functionalTest.output.classesDirs
    classpath = sourceSets.functionalTest.runtimeClasspath
    jvmArgs '-Xmx1g'
}
